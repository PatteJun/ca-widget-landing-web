---
import { getLangFromUrl, useTranslations } from '../i18n/ui';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div class="relative w-full max-w-3xl mx-auto">
  <!-- Browser Chrome -->
  <div class="relative rounded-t-lg bg-gray-100 p-2">
    <div class="flex items-center">
      <div class="flex space-x-2">
        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
        <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
        <div class="w-3 h-3 bg-green-500 rounded-full"></div>
      </div>
      <div class="ml-4 flex-1">
        <div class="bg-white rounded-md py-1 px-3 flex items-center">
          <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4"></path>
          </svg>
          <span class="ml-2 text-sm text-gray-600">{t('browser.url')}</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Browser Content -->
  <div class="bg-white rounded-b-lg shadow-2xl p-6">
    <div class="relative">
      <!-- Cursor -->
      <div id="cursor" class="absolute w-6 h-6 pointer-events-none opacity-0 z-50 text-black">
        <svg width="100%" height="100%" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M20.5056 10.7754C21.1225 10.5355 21.431 10.4155 21.5176 10.2459C21.5926 10.099 21.5903 9.92446 21.5115 9.77954C21.4205 9.61226 21.109 9.50044 20.486 9.2768L4.59629 3.5728C4.0866 3.38983 3.83175 3.29835 3.66514 3.35605C3.52029 3.40621 3.40645 3.52004 3.35629 3.6649C3.29859 3.8315 3.39008 4.08635 3.57304 4.59605L9.277 20.4858C9.50064 21.1088 9.61246 21.4203 9.77973 21.5113C9.92465 21.5901 10.0991 21.5924 10.2461 21.5174C10.4157 21.4308 10.5356 21.1223 10.7756 20.5054L13.3724 13.8278C13.4194 13.707 13.4429 13.6466 13.4792 13.5957C13.5114 13.5506 13.5508 13.5112 13.5959 13.479C13.6468 13.4427 13.7072 13.4192 13.828 13.3722L20.5056 10.7754Z" fill="white" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </div>

      <!-- Example Car Dealer Website Content -->
      <nav class="flex justify-between items-center mb-8">
        <div class="w-32 h-6 bg-gray-200 rounded"></div>
        <div class="flex space-x-4">
          <div class="w-16 h-2 bg-gray-200 rounded"></div>
          <div class="w-16 h-2 bg-gray-200 rounded"></div>
          <div class="w-16 h-2 bg-gray-200 rounded"></div>
        </div>
      </nav>
      
      <div class="grid grid-cols-2 gap-6">
        <div class="space-y-4">
          <div class="aspect-video bg-gray-100 rounded-lg flex items-center justify-center">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" aria-label={t('browser.mockup.image')}>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div class="space-y-2">
            <div class="w-48 h-6 bg-gray-200 rounded"></div>
            <div class="w-36 h-4 bg-gray-200 rounded"></div>
          </div>
          <button id="tradeInBtn" class="trade-in-btn px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-all">
            {t('browser.mockup.tradein')}
          </button>
        </div>
        <div class="relative">
          <!-- Form Widget Mockup -->
          <div id="formWidget" class="form-widget absolute -right-4 top-0 w-[320px] bg-white rounded-lg shadow-xl p-6 opacity-0 translate-x-5">
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-primary-text">{t('browser.mockup.form.title')}</h3>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">
                  {t('browser.mockup.form.year')}
                </label>
                <div class="h-10 bg-gray-50 rounded-lg w-full border border-gray-200"></div>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-medium text-gray-700">
                  {t('browser.mockup.form.mileage')}
                </label>
                <div class="h-10 bg-gray-50 rounded-lg w-full border border-gray-200"></div>
              </div>
              <button class="w-full px-4 py-3 bg-primary text-white rounded-lg hover:bg-primary/90">
                {t('browser.mockup.form.submit')}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .trade-in-btn {
    animation: pulse 3s infinite;
  }

  .trade-in-btn.clicked {
    animation: click 0.4s forwards;
  }

  .form-widget {
    transition: all 1s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .form-widget.show {
    opacity: 1 !important;
    transform: translateX(0) !important;
  }

  #cursor {
    transition: all 1.5s cubic-bezier(0.4, 0, 0.2, 1);
    transform-origin: 15% 15%;
  }

  #cursor.show {
    opacity: 1 !important;
  }

  #cursor.clicking {
    transform: scale(0.9);
  }

  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(216, 24, 37, 0.4);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(216, 24, 37, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(216, 24, 37, 0);
    }
  }

  @keyframes click {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(0.95);
    }
    100% {
      transform: scale(1);
    }
  }
</style>

<script>
  function playAnimation() {
    const cursor = document.getElementById('cursor');
    const tradeInBtn = document.getElementById('tradeInBtn');
    const formWidget = document.getElementById('formWidget');

    if (!cursor || !tradeInBtn || !formWidget) return;

    // Get button position
    const btnRect = tradeInBtn.getBoundingClientRect();
    const browserContent = tradeInBtn.closest('.bg-white');
    if (!browserContent) return;
    const browserRect = browserContent.getBoundingClientRect();

    // Calculate relative positions
    const btnX = btnRect.left - browserRect.left + (btnRect.width / 2) - 12;
    const btnY = btnRect.top - browserRect.top + (btnRect.height / 2) - 12;

    // Reset state
    tradeInBtn.classList.remove('clicked');
    formWidget.classList.remove('show');
    cursor.style.transform = '';
    cursor.classList.remove('clicking');

    // Initial cursor position (top-left corner)
    cursor.style.left = '50px';
    cursor.style.top = '50px';
    cursor.classList.add('show');

    // Animation sequence
    setTimeout(() => {
      // Move cursor to button
      cursor.style.left = `${btnX}px`;
      cursor.style.top = `${btnY}px`;

      // Click animation
      setTimeout(() => {
        cursor.classList.add('clicking');
        tradeInBtn.classList.add('clicked');
        
        // Show form widget
        setTimeout(() => {
          formWidget.classList.add('show');
          
          // Move cursor to form
          const formRect = formWidget.getBoundingClientRect();
          const formX = formRect.left - browserRect.left + (formRect.width / 2) - 12;
          const formY = formRect.top - browserRect.top + 100 - 12; // Move to the middle of the form
          
          cursor.style.left = `${formX}px`;
          cursor.style.top = `${formY}px`;
          
          // Remove click effect
          setTimeout(() => {
            cursor.classList.remove('clicking');
            tradeInBtn.classList.remove('clicked');
          }, 800);

          // Hide cursor and reset form after delay
          setTimeout(() => {
            cursor.classList.remove('show');
            formWidget.classList.remove('show');
          }, 5000);
        }, 600);
      }, 2000);
    }, 1500);
  }

  function startAnimationLoop() {
    // Play animation immediately
    playAnimation();
    
    // Loop animation every 10 seconds
    setInterval(playAnimation, 10000);
  }

  // Start the animation loop when the page loads
  document.addEventListener('DOMContentLoaded', startAnimationLoop);
</script>