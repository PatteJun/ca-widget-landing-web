---
import { languages } from '../i18n/ui';

interface Props {
  lang: keyof typeof languages;
}

const { lang } = Astro.props;
---

<div class="relative inline-block text-left">
  <div>
    <button
      type="button"
      class="inline-flex items-center gap-x-1.5 text-sm text-gray-500 hover:text-gray-700"
      id="language-menu-button"
      aria-expanded="true"
      aria-haspopup="true"
    >
      {languages[lang]}
      <svg class="-mr-1 h-5 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
      </svg>
    </button>
  </div>

  <div
    class="language-menu hidden absolute right-0 z-10 mt-2 w-32 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="language-menu-button"
    tabindex="-1"
  >
    <div class="py-1" role="none">
      {Object.entries(languages).map(([code, name]) => (
        <a
          href={`/${code === 'de' ? '' : code}`}
          class={`block px-4 py-2 text-sm ${code === lang ? 'bg-gray-100 text-gray-900' : 'text-gray-700'} hover:bg-gray-50`}
          role="menuitem"
          tabindex="-1"
        >
          {name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  const button = document.getElementById('language-menu-button');
  const menu = document.querySelector('.language-menu');

  if (button && menu) {
    const toggleMenu = () => {
      const expanded = button.getAttribute('aria-expanded') === 'true';
      button.setAttribute('aria-expanded', (!expanded).toString());
      menu.classList.toggle('hidden');
    };

    // Toggle menu on button click
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMenu();
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!menu.contains(e.target as Node) && !button.contains(e.target as Node)) {
        button.setAttribute('aria-expanded', 'false');
        menu.classList.add('hidden');
      }
    });
  }
</script>